# Generated by Django 3.2.25 on <timestamp>

from django.db import migrations

def create_project_admin_group(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    # Create the "Project Admins" group
    project_admin_group, created = Group.objects.get_or_create(name='Project Admins')

    if created:
        # Optional: Add specific permissions to this group if needed.
        # For example, if you want Project Admins to be able to manage (add, change, delete, view)
        # Project and ProjectMembership models.
        # This assumes your app_label for users models is 'users'.
        project_content_type = ContentType.objects.get_for_model(apps.get_model('users', 'Project'))
        project_membership_content_type = ContentType.objects.get_for_model(apps.get_model('users', 'ProjectMembership'))
        # todo_item_content_type = ContentType.objects.get_for_model(apps.get_model('users', 'TodoItem'))


        project_permissions = Permission.objects.filter(content_type=project_content_type)
        project_membership_permissions = Permission.objects.filter(content_type=project_membership_content_type)
        # todo_item_permissions = Permission.objects.filter(content_type=todo_item_content_type)


        # Add all permissions for Project and ProjectMembership to the group
        for perm in list(project_permissions) + list(project_membership_permissions):
            project_admin_group.permissions.add(perm)

        print('Created "Project Admins" group and assigned permissions for Project and ProjectMembership models.')

def remove_project_admin_group(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Group.objects.filter(name='Project Admins').delete()
    print('Deleted "Project Admins" group.')

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0011_auto_20250629_1242'), # Depends on the previous model migration
        # Also add dependencies on 'auth' and 'contenttypes' if they are not implicitly handled
        # or if specific initial data from them is needed before this migration runs.
        # For get_for_model to work reliably for auth.Group, auth.Permission
        # it's good practice to ensure those apps' migrations have run.
        # Django usually handles this, but for safety:
        ('auth', '__latest__'),
        ('contenttypes', '__latest__'),
    ]

    operations = [
        migrations.RunPython(create_project_admin_group, remove_project_admin_group),
    ]
